name: Sync and Merge Upstream Repositories
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  sync-and-merge:
    runs-on: ubuntu-latest
    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TARGET_REPO: t96mytell/openwrt-packages-23.05
      TARGET_BRANCH: main
    
    steps:
      # Step 0: Checkout Target Repository
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
      
      # 确保初始提交存在
      - name: Ensure initial commit exists
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "仓库已有提交记录"
          else
            echo "创建初始提交..."
            touch README.md
            git add README.md
            git commit -m "Initial commit"
            git push origin ${{ env.TARGET_BRANCH }}
          fi
      
      # Step 1: 支持无顶层目录仓库和通用嵌套目录的同步方案
      - name: Sync from upstream repositories
        run: |
          set -euo pipefail
          
          # 配置Git用户
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 主同步函数
          smart_sync() {
            local repo_url=$1
            local branch=$2
            local remote_name=$3
            local mapping=$4
            
            echo "========================================"
            echo "处理仓库: $repo_url (分支: $branch)"
            echo "远程名称: $remote_name"
            echo "映射关系: $mapping"
            echo "----------------------------------------"
            
            # 添加上游远程仓库
            git remote add "$remote_name" "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@$repo_url"
            git fetch "$remote_name" "$branch" --depth=1
            
            # 创建临时合并分支
            local temp_branch="merge-${remote_name}"
            git checkout -b "$temp_branch"
            
            # 解析映射关系
            IFS=',' read -ra mappings <<< "$mapping"
            for map in "${mappings[@]}"; do
              IFS=':' read -r src_path dest_path <<< "${map// /}"
              
              # 特殊处理根目录映射
              if [ -z "$src_path" ]; then
                src_path="."
              fi
              
              # 创建目标目录
              mkdir -p "$(dirname "$dest_path")"
              
              # 检出上游文件到目标路径
              git checkout "${remote_name}/${branch}" -- "$src_path"
              if [ "$src_path" != "." ]; then
                mkdir -p "$dest_path"
                mv "$src_path"/* "$dest_path"/
                rmdir "$src_path"
              fi
            done
            
            # 提交上游更改
            git add .
            if ! git diff-index --quiet HEAD; then
              git commit -m "Sync from ${remote_name} ${branch}"
            fi
            
            # 合并回主分支（使用ours策略保留目标仓库更改）
            git checkout ${{ env.TARGET_BRANCH }}
            git merge "$temp_branch" -m "Merge ${remote_name}" -X ours --allow-unrelated-histories --no-ff
            
            # 清理
            git branch -D "$temp_branch"
            git remote remove "$remote_name"
            
            echo "----------------------------------------"
            echo "仓库处理完成: $repo_url"
            echo "========================================"
          }
          
          # 同步Siriling/5G-Modem-Support
          sync_repo "github.com/Siriling/5G-Modem-Support.git" "main" \
            "repos/5G-Modem-Support" \
            "fibocom-dial:fibocom-dial,\
            fibocom_MHI:fibocom_MHI,\
            fibocom_QMI_WWAN:fibocom_QMI_WWAN,\
            luci-app-cpe:luci-app-cpe,\
            luci-app-gobinetmodem:luci-app-gobinetmodem,\
            luci-app-hypermodem:luci-app-hypermodem,\
            luci-app-modem:luci-app-modem,\
            luci-app-pcimodem:luci-app-pcimodem,\
            luci-app-sms-tool:luci-app-sms-tool,\
            luci-app-spdmodem:luci-app-spdmodem,\
            luci-app-usbmodem:luci-app-usbmodem,\
            meig-cm:meig-cm,\
            meig_QMI_WWAN:meig_QMI_WWAN,\
            quectel_Gobinet:quectel_Gobinet,\
            quectel_MHI:quectel_MHI,\
            quectel_QMI_WWAN:quectel_QMI_WWAN,\
            quectel_SRPD_PCIE:quectel_SRPD_PCIE,\
            quectel_cm_5G:quectel_cm_5G,\
            sendat:sendat,\
            sms-tool:sms-tool"
          
          # 同步immortalwrt/packages
          sync_repo "github.com/immortalwrt/packages.git" "master" \
            "repos/immortalwrt-packages" \
            "lang/lua-neturl:lua-neturl,\
            net/keepalived:keepalived"

          # 同步immortalwrt/luci
          sync_repo "github.com/immortalwrt/luci.git" "master" \
            "repos/immortalwrt-luci" \
            "applications/luci-app-keepalived:luci-app-keepalived"
          
          # 同步kiddin9/kwrt-packages
          sync_repo "github.com/kiddin9/kwrt-packages.git" "main" \
            "repos/kwrt-packages" \
            "luci-app-easymesh:luci-app-easymesh,\
            luci-app-leigod-acc:luci-app-leigod-acc,\
            leigod-acc:leigod-acc,\
            luci-app-uugamebooster:luci-app-uugamebooster,\
            uugamebooster:uugamebooster,\
            shadowsocks-libev:shadowsocks-libev,\
            fullconenat-nft:fullconenat-nft,\
            luci-app-dockerman:luci-app-dockerman,\
            dockerd:dockerd,\
            luci-app-pptp-server:luci-app-pptp-server,\
            luci-app-pppoe-relay:luci-app-pppoe-relay,\
            luci-app-pppoe-server:luci-app-pppoe-server,\
            luci-app-openvpn-server:luci-app-openvpn-server,\
            luci-app-openvpn-client:luci-app-openvpn-client,\
            luci-app-ipsec-server:luci-app-ipsec-server,\
            luci-app-ipsec-vpnd:luci-app-ipsec-vpnd,\
            luci-app-zerotier:luci-app-zerotier,\
            luci-app-einat:luci-app-einat,\
            openwrt-einat-ebpf:openwrt-einat-ebpf,\
            dns2socks-rust:dns2socks-rust"
          
          # 同步kenzok8/small-package
          sync_repo "github.com/kenzok8/small-package.git" "main" \
            "repos/small-package" \
            "luci-app-adguardhome:luci-app-adguardhome,\
            adguardhome:adguardhome"

          # 同步kenzok8/small
          sync_repo "github.com/kenzok8/small.git" "master" \
            "repos/small" \
            "brook:brook,\
            chinadns-ng:chinadns-ng,\
            dns2socks:dns2socks,\
            dns2tcp:dns2tcp,\
            gn:gn,\
            hysteria:hysteria,\
            ipt2socks:ipt2socks,\
            luci-app-bypass:luci-app-bypass,\
            luci-app-fchomo:luci-app-fchomo,\
            luci-app-homeproxy:luci-app-homeproxy,\
            luci-app-mosdns:luci-app-mosdns,\
            luci-app-nikki:luci-app-nikki,\
            luci-app-openclash:luci-app-openclash,\
            luci-app-passwall:luci-app-passwall,\
            luci-app-passwall2:luci-app-passwall2,\
            luci-app-ssr-plus:luci-app-ssr-plus,\
            microsocks:microsocks,\
            mihomo:mihomo,\
            mosdns:mosdns,\
            naiveproxy:naiveproxy,\
            nikki:nikki,\
            pdnsd-alt:pdnsd-alt,\
            redsocks2:redsocks2,\
            shadow-tls:shadow-tls,\
            shadowsocks-rust:shadowsocks-rust,\
            shadowsocksr-libev:shadowsocksr-libev,\
            simple-obfs:simple-obfs,\
            sing-box:sing-box,\
            ssocks:ssocks,\
            tcping:tcping,\
            trojan-go:trojan-go,\
            trojan-plus:trojan-plus,\
            trojan:trojan,\
            tuic-client:tuic-client,\
            v2dat:v2dat,\
            v2ray-core:v2ray-core,\
            v2ray-geodata:v2ray-geodata,\
            v2ray-geoview:v2ray-geoview,\
            v2ray-plugin:v2ray-plugin,\
            v2raya:v2raya,\
            xray-core:xray-core,\
            xray-plugin:xray-plugin"
          
          echo "========================================"
          echo "所有仓库同步完成!"
          echo "========================================"
      
      # Step 2: 推送更改
      - name: Push Changes
        run: |
          git remote set-url origin "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ env.TARGET_REPO }}.git"
          
          # 检查是否有更改
          if git diff-index --quiet HEAD; then
            echo "没有需要提交的更改"
          else
            # 拉取最新更改（处理可能的冲突）
            git pull origin ${{ env.TARGET_BRANCH }} --rebase --autostash
            
            # 推送更改
            git push origin ${{ env.TARGET_BRANCH }}
            echo "更改已成功推送!"
          fi
      
      # Step 3: 清理工作流运行记录
      - name: Cleanup old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 5
          repository: ${{ github.repository }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
