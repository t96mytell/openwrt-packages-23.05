name: Sync and Merge Upstream Repositories
on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 */3 * * *' # 每3小时自动触发一次

jobs:
  sync-and-merge:
    runs-on: ubuntu-latest
    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TARGET_REPO: t96mytell/openwrt-packages-23.05
      TARGET_BRANCH: main
    
    steps:
      # Step 0: Checkout Target Repository
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
      
      # 调试：打印检出信息
      - name: Print Checkout Information
        run: |
          echo "当前工作目录: $(pwd)"
          echo "仓库内容:"
          ls -la
      
      # 确保.git目录存在
      - name: Verify .git folder
        run: |
          if [ ! -d ".git" ]; then
            echo "错误: .git目录不存在!"
            exit 1
          else
            echo ".git目录验证通过"
          fi
      
      # 确保有初始提交
      - name: Ensure initial commit exists
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "仓库已有提交记录"
          else
            echo "创建初始提交..."
            touch README.md
            git add README.md
            git commit -m "Initial commit"
            git push origin ${{ env.TARGET_BRANCH }}
          fi
      
      # Step 1: 支持无顶层目录仓库和通用嵌套目录的同步方案
      - name: Sync from upstream repositories (Hash-based)
        run: |
          set -euo pipefail
          
          # 计算文件哈希
          calculate_hash() {
            local file_path=$1
            if [ -f "$file_path" ]; then
              sha256sum "$file_path" | cut -d' ' -f1
            else
              echo "file_not_found"
            fi
          }
          
          # 同步函数
          sync_repo() {
            local repo_url=$1
            local branch=$2
            local clone_dir=$3
            local mappings=$4
            
            echo "========================================"
            echo "处理仓库: $repo_url (分支: $branch)"
            echo "临时目录: $clone_dir"
            echo "映射关系: $mappings"
            echo "----------------------------------------"
            
            # 克隆上游仓库
            echo "正在克隆上游仓库..."
            git clone --quiet --depth 1 --branch "$branch" \
              "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@$repo_url" \
              "$clone_dir" || {
              echo "错误: 克隆失败 - $repo_url"
              return 1
            }
            
            # 验证克隆结果
            if [ ! -d "$clone_dir" ] || [ -z "$(ls -A "$clone_dir")" ]; then
              echo "错误: 克隆目录为空 - $clone_dir"
              return 1
            fi
            
            # 解析映射关系
            IFS=',' read -ra mapping_list <<< "$mappings"
            for mapping in "${mapping_list[@]}"; do
              # 去除映射字符串中的空格
              mapping=$(echo "$mapping" | tr -d '[:space:]')
              
              # 分割源路径和目标路径
              IFS=':' read -r src_path dest_path <<< "$mapping"
              
              # 特殊处理：空源路径表示整个仓库根目录
              if [ -z "$src_path" ]; then
                src_path="."
                echo "检测到空源路径 - 将同步整个仓库根目录"
              fi
              
              # 处理路径格式
              src_path="${src_path%/}"
              dest_path="${dest_path%/}"
              
              # 完整源路径
              full_src="$clone_dir/$src_path"
              
              echo "同步: $src_path → $dest_path"
              
              if [ -e "$full_src" ]; then
                # 创建目标目录的父目录
                mkdir -p "$(dirname "./$dest_path")"
                
                # 基于哈希的同步
                if [ "$src_path" == "." ]; then
                  # 同步整个仓库根目录
                  echo "正在同步整个仓库根目录..."
                  
                  # 1. 遍历上游目录中的所有文件
                  find "$clone_dir" -type f | while read -r src_file; do
                    # 计算相对路径
                    rel_path="${src_file#$clone_dir/}"
                    dest_file="./$dest_path/$rel_path"
                    
                    # 计算哈希
                    src_hash=$(calculate_hash "$src_file")
                    dest_hash=$(calculate_hash "$dest_file")
                    
                    # 处理文件
                    if [ ! -f "$dest_file" ]; then
                      # 文件在目标仓库不存在，直接复制
                      echo "添加新文件: $rel_path"
                      mkdir -p "$(dirname "$dest_file")"
                      cp -f "$src_file" "$dest_file"
                    elif [ "$src_hash" == "$dest_hash" ]; then
                      # 文件相同，无需操作
                      : # 无操作
                    else
                      # 文件不同，检查目标仓库是否修改过
                      if git ls-files --error-unmatch "$dest_file" >/dev/null 2>&1; then
                        # 文件在git中，检查是否被修改
                        if git diff --quiet HEAD -- "$dest_file"; then
                          # 未被修改，使用上游版本
                          echo "更新文件（未被修改）: $rel_path"
                          cp -f "$src_file" "$dest_file"
                        else
                          # 已被修改，保留目标仓库版本
                          echo "保留修改的文件: $rel_path"
                        fi
                      else
                        # 文件不在git中，视为新文件，使用上游版本
                        echo "更新非git文件: $rel_path"
                        cp -f "$src_file" "$dest_file"
                      fi
                    fi
                  done
                  
                  # 2. 处理上游删除的文件
                  find "./$dest_path" -type f | while read -r dest_file; do
                    rel_path="${dest_file#./$dest_path/}"
                    src_file="$clone_dir/$rel_path"
                    
                    if [ ! -f "$src_file" ]; then
                      # 文件在上游已删除
                      if git ls-files --error-unmatch "$dest_file" >/dev/null 2>&1; then
                        # 文件在git中，检查是否被修改
                        if git diff --quiet HEAD -- "$dest_file"; then
                          # 未被修改，删除文件
                          echo "删除文件（未被修改）: $rel_path"
                          rm -f "$dest_file"
                        else
                          # 已被修改，保留文件
                          echo "保留已删除但被修改的文件: $rel_path"
                        fi
                      else
                        # 文件不在git中，删除
                        echo "删除非git文件: $rel_path"
                        rm -f "$dest_file"
                      fi
                    fi
                  done
                  
                elif [ -d "$full_src" ]; then
                  # 同步目录
                  echo "正在同步目录内容..."
                  
                  # 1. 遍历上游目录中的所有文件
                  find "$full_src" -type f | while read -r src_file; do
                    # 计算相对路径
                    rel_path="${src_file#$full_src/}"
                    dest_file="./$dest_path/$rel_path"
                    
                    # 计算哈希
                    src_hash=$(calculate_hash "$src_file")
                    dest_hash=$(calculate_hash "$dest_file")
                    
                    # 处理文件
                    if [ ! -f "$dest_file" ]; then
                      # 文件在目标仓库不存在，直接复制
                      echo "添加新文件: $rel_path"
                      mkdir -p "$(dirname "$dest_file")"
                      cp -f "$src_file" "$dest_file"
                    elif [ "$src_hash" == "$dest_hash" ]; then
                      # 文件相同，无需操作
                      : # 无操作
                    else
                      # 文件不同，检查目标仓库是否修改过
                      if git ls-files --error-unmatch "$dest_file" >/dev/null 2>&1; then
                        # 文件在git中，检查是否被修改
                        if git diff --quiet HEAD -- "$dest_file"; then
                          # 未被修改，使用上游版本
                          echo "更新文件（未被修改）: $rel_path"
                          cp -f "$src_file" "$dest_file"
                        else
                          # 已被修改，保留目标仓库版本
                          echo "保留修改的文件: $rel_path"
                        fi
                      else
                        # 文件不在git中，视为新文件，使用上游版本
                        echo "更新非git文件: $rel_path"
                        cp -f "$src_file" "$dest_file"
                      fi
                    fi
                  done
                  
                  # 2. 处理上游删除的文件
                  find "./$dest_path" -type f | while read -r dest_file; do
                    rel_path="${dest_file#./$dest_path/}"
                    src_file="$full_src/$rel_path"
                    
                    if [ ! -f "$src_file" ]; then
                      # 文件在上游已删除
                      if git ls-files --error-unmatch "$dest_file" >/dev/null 2>&1; then
                        # 文件在git中，检查是否被修改
                        if git diff --quiet HEAD -- "$dest_file"; then
                          # 未被修改，删除文件
                          echo "删除文件（未被修改）: $rel_path"
                          rm -f "$dest_file"
                        else
                          # 已被修改，保留文件
                          echo "保留已删除但被修改的文件: $rel_path"
                        fi
                      else
                        # 文件不在git中，删除
                        echo "删除非git文件: $rel_path"
                        rm -f "$dest_file"
                      fi
                    fi
                  done
                  
                else
                  # 同步单个文件
                  echo "正在同步文件..."
                  
                  # 计算哈希
                  src_hash=$(calculate_hash "$full_src")
                  dest_hash=$(calculate_hash "./$dest_path")
                  
                  if [ ! -f "./$dest_path" ]; then
                    # 文件不存在，直接复制
                    echo "添加新文件: $dest_path"
                    mkdir -p "$(dirname "./$dest_path")"
                    cp -f "$full_src" "./$dest_path"
                  elif [ "$src_hash" == "$dest_hash" ]; then
                    # 文件相同，无需操作
                    echo "文件相同，无需更新: $dest_path"
                  else
                    # 文件不同，检查目标仓库是否修改过
                    if git ls-files --error-unmatch "./$dest_path" >/dev/null 2>&1; then
                      # 文件在git中，检查是否被修改
                      if git diff --quiet HEAD -- "./$dest_path"; then
                        # 未被修改，使用上游版本
                        echo "更新文件（未被修改）: $dest_path"
                        cp -f "$full_src" "./$dest_path"
                      else
                        # 已被修改，保留目标仓库版本
                        echo "保留修改的文件: $dest_path"
                      fi
                    else
                      # 文件不在git中，视为新文件，使用上游版本
                      echo "更新非git文件: $dest_path"
                      cp -f "$full_src" "./$dest_path"
                    fi
                  fi
                fi
                
                echo "同步成功! 目标内容:"
                ls -lA "./$dest_path"
              else
                echo "警告: 源路径不存在 - $full_src"
                echo "目录结构:"
                find "$clone_dir" -maxdepth 3 -type d | sort
                return 1
              fi
            done
            
            # 清理
            echo "清理临时目录..."
            rm -rf "$clone_dir"
            echo "----------------------------------------"
            echo "仓库处理完成: $repo_url"
            echo "========================================"
          }
          
          # 同步Siriling/5G-Modem-Support
          sync_repo "github.com/Siriling/5G-Modem-Support.git" "main" \
            "repos/5G-Modem-Support" \
            "fibocom-dial:fibocom-dial,\
            fibocom_MHI:fibocom_MHI,\
            fibocom_QMI_WWAN:fibocom_QMI_WWAN,\
            luci-app-cpe:luci-app-cpe,\
            luci-app-gobinetmodem:luci-app-gobinetmodem,\
            luci-app-hypermodem:luci-app-hypermodem,\
            luci-app-modem:luci-app-modem,\
            luci-app-pcimodem:luci-app-pcimodem,\
            luci-app-sms-tool:luci-app-sms-tool,\
            luci-app-spdmodem:luci-app-spdmodem,\
            luci-app-usbmodem:luci-app-usbmodem,\
            meig-cm:meig-cm,\
            meig_QMI_WWAN:meig_QMI_WWAN,\
            quectel_Gobinet:quectel_Gobinet,\
            quectel_MHI:quectel_MHI,\
            quectel_QMI_WWAN:quectel_QMI_WWAN,\
            quectel_SRPD_PCIE:quectel_SRPD_PCIE,\
            quectel_cm_5G:quectel_cm_5G,\
            sendat:sendat,\
            sms-tool:sms-tool"
          
          # 同步immortalwrt/packages
          sync_repo "github.com/immortalwrt/packages.git" "master" \
            "repos/immortalwrt-packages" \
            "lang/lua-neturl:lua-neturl,\
            net/keepalived:keepalived"

          # 同步immortalwrt/luci
          sync_repo "github.com/immortalwrt/luci.git" "master" \
            "repos/immortalwrt-luci" \
            "applications/luci-app-keepalived:luci-app-keepalived"
          
          # 同步kiddin9/kwrt-packages
          sync_repo "github.com/kiddin9/kwrt-packages.git" "main" \
            "repos/kwrt-packages" \
            "luci-app-easymesh:luci-app-easymesh,\
            luci-app-leigod-acc:luci-app-leigod-acc,\
            leigod-acc:leigod-acc,\
            luci-app-uugamebooster:luci-app-uugamebooster,\
            uugamebooster:uugamebooster,\
            shadowsocks-libev:shadowsocks-libev,\
            fullconenat-nft:fullconenat-nft,\
            luci-app-dockerman:luci-app-dockerman,\
            dockerd:dockerd,\
            luci-app-pptp-server:luci-app-pptp-server,\
            luci-app-pppoe-relay:luci-app-pppoe-relay,\
            luci-app-pppoe-server:luci-app-pppoe-server,\
            luci-app-openvpn-server:luci-app-openvpn-server,\
            luci-app-openvpn-client:luci-app-openvpn-client,\
            luci-app-ipsec-server:luci-app-ipsec-server,\
            luci-app-ipsec-vpnd:luci-app-ipsec-vpnd,\
            luci-app-zerotier:luci-app-zerotier,\
            luci-app-einat:luci-app-einat,\
            openwrt-einat-ebpf:openwrt-einat-ebpf,\
            dns2socks-rust:dns2socks-rust"
          
          # 同步kenzok8/small-package
          sync_repo "github.com/kenzok8/small-package.git" "main" \
            "repos/small-package" \
            "luci-app-adguardhome:luci-app-adguardhome,\
            adguardhome:adguardhome"

          # 同步kenzok8/small
          sync_repo "github.com/kenzok8/small.git" "master" \
            "repos/small" \
            "brook:brook,\
            chinadns-ng:chinadns-ng,\
            dns2socks:dns2socks,\
            dns2tcp:dns2tcp,\
            gn:gn,\
            hysteria:hysteria,\
            ipt2socks:ipt2socks,\
            luci-app-bypass:luci-app-bypass,\
            luci-app-fchomo:luci-app-fchomo,\
            luci-app-homeproxy:luci-app-homeproxy,\
            luci-app-mosdns:luci-app-mosdns,\
            luci-app-nikki:luci-app-nikki,\
            luci-app-openclash:luci-app-openclash,\
            luci-app-passwall:luci-app-passwall,\
            luci-app-passwall2:luci-app-passwall2,\
            luci-app-ssr-plus:luci-app-ssr-plus,\
            microsocks:microsocks,\
            mihomo:mihomo,\
            mosdns:mosdns,\
            naiveproxy:naiveproxy,\
            nikki:nikki,\
            pdnsd-alt:pdnsd-alt,\
            redsocks2:redsocks2,\
            shadow-tls:shadow-tls,\
            shadowsocks-rust:shadowsocks-rust,\
            shadowsocksr-libev:shadowsocksr-libev,\
            simple-obfs:simple-obfs,\
            sing-box:sing-box,\
            ssocks:ssocks,\
            tcping:tcping,\
            trojan-go:trojan-go,\
            trojan-plus:trojan-plus,\
            trojan:trojan,\
            tuic-client:tuic-client,\
            v2dat:v2dat,\
            v2ray-core:v2ray-core,\
            v2ray-geodata:v2ray-geodata,\
            v2ray-geoview:v2ray-geoview,\
            v2ray-plugin:v2ray-plugin,\
            v2raya:v2raya,\
            xray-core:xray-core,\
            xray-plugin:xray-plugin"
          
          # 最终验证
          echo "========================================"
          echo "所有仓库同步完成!"
          echo "最终目录结构:"
          find . -maxdepth 3 -type d | sort
          echo "========================================"
      
      # Step 2: 配置Git凭据
      - name: Configure Git Credentials
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin \
            "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ env.TARGET_REPO }}.git"
      
      # Step 3: 提交和推送更改
      - name: Commit and Push Changes
        run: |
          set -e
          
          # 切换到目标分支
          git checkout ${{ env.TARGET_BRANCH }} || \
            git checkout -b ${{ env.TARGET_BRANCH }}
          
          # 添加所有更改
          git add .
          
          # 检查是否有更改
          if git diff-index --quiet HEAD; then
            echo "没有需要提交的更改"
          else
            # 提交更改
            git commit -m "自动同步: 从上游仓库更新 $(date +'%Y-%m-%d %H:%M:%S')"
            
            # 拉取最新更改
            echo "拉取最新更改..."
            git pull origin ${{ env.TARGET_BRANCH }} || true
            
            # 解决可能的冲突（保留目标仓库版本）
            resolve_conflicts() {
              local files_to_resolve=("README.md" "LICENSE")
              for file in "${files_to_resolve[@]}"; do
                if git ls-files --unmerged | grep -q "$file"; then
                  echo "检测到冲突: $file, 保留目标仓库版本..."
                  git checkout --ours "$file"
                  git add "$file"
                fi
              done
            }
            
            # 检查是否有未解决的冲突
            if git ls-files --unmerged | grep -q .; then
              echo "检测到冲突，尝试解决..."
              resolve_conflicts
              git commit -m "解决冲突: 保留目标仓库修改" || true
            fi
            
            # 推送更改
            echo "推送更改到远程仓库..."
            git push origin ${{ env.TARGET_BRANCH }}
            echo "更改已成功推送!"
          fi

      # Step 4: 清理7天前的工作流运行记录
      - name: Cleanup old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 5
          repository: ${{ github.repository }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
