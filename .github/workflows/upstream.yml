name: Sync and Merge Upstream Repositories

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 2 * * *' # 每天凌晨2点自动触发一次

jobs:
  sync-and-merge:
    runs-on: ubuntu-latest

    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TARGET_REPO: t96mytell/openwrt-packages-23.05
      TARGET_BRANCH: main

    steps:
      # Step 0: Checkout Target Repository using the Personal Access Token
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0  # Fetch all history for tags and branches

      # Debugging: Print detailed information about the checkout process
      - name: Print Detailed Checkout Information
        run: |
          echo "Checking out repository: $TARGET_REPO"
          echo "Target branch: $TARGET_BRANCH"
          echo "Current directory is: $(pwd)"
          ls -la

      # Verify .git folder exists after checkout
      - name: Verify .git folder exists in target-repo
        id: verify_git_folder
        run: |
          if [ ! -d ".git" ]; then
            echo "Error: .git folder not found!"
            exit 1
          else
            echo ".git folder found."
            ls -la .git
          fi

      # Ensure there's at least one commit in the repository
      - name: Ensure initial commit exists
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "Repository has existing commits."
          else
            echo "No commits found, creating an initial commit..."
            touch README.md
            git add README.md
            git commit -m "Initial commit"
            git push origin ${{ env.TARGET_BRANCH }}
          fi

      # Step 1: Define upstream repositories and directories to sync, including helper function and its usage
      - name: Sync from upstream repositories
        run: |
          define_clone_function() {
            local REPO_URL=$1
            local BRANCH=$2
            local DEST_DIR=$3

            # Ensure the URL does not start with https:// twice
            git clone --depth 1 --branch "$BRANCH" "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@$REPO_URL" "$DEST_DIR" || exit 1
          }

          # Sync specific directories from Siriling/5G-Modem-Support
          REPO_URL="github.com/Siriling/5G-Modem-Support.git"
          BRANCH="main"
          INCLUDE_DIRS=(
            "fibocom-dial"
            "fibocom_MHI.fibocom_QMI_WWAN"
            "luci-app-cpe"
            "luci-app-gobinetmodem"
            "luci-app-hypermodem"
            "luci-app-modem"
            "luci-app-pcimodem"
            "luci-app-sms-tool"
            "luci-app-spdmodem"
            "luci-app-usbmodem"
            "meig-cm"
            "meig_QMI_WWAN"
            "quectel_Gobinet"
            "quectel_MHI"
            "quectel_QMI_WWAN"
            "quectel_SRPD_PCIE"
            "quectel_cm_5G"
            "rooter"
            "sendat"
            "sms-tool"
          )
          DEST_DIR="repos/5G-Modem-Support"

          # Use the helper function to clone the repository
          define_clone_function "$REPO_URL" "$BRANCH" "$DEST_DIR"

          # Debug: Check if the cloned directory exists and is not empty
          if [ ! -d "$DEST_DIR" ] || [ -z "$(ls -A $DEST_DIR)" ]; then
            echo "Error: Cloned directory $DEST_DIR is missing or empty!"
            exit 1
          else
            echo "Cloned directory $DEST_DIR contains:"
            ls -la "$DEST_DIR"
          fi

          # Sync specified directories
          for dir in "${INCLUDE_DIRS[@]}"; do
            if [ -d "$DEST_DIR/$dir" ]; then
              echo "Syncing directory: $dir to ./"
              rsync -av --delete-after "$DEST_DIR/$dir/" "./$dir/"
            else
              echo "Directory $dir does not exist in 5G-Modem-Support."
            fi
          done

          # Debug: Check if files were copied correctly
          echo "Files after syncing from $DEST_DIR:"
          ls -la

          # Cleanup
          rm -rf "$DEST_DIR"

          # Sync from kiddin9/kwrt-packages (unchanged)
          REPO_URL="github.com/kiddin9/kwrt-packages.git"
          BRANCH="main"
          INCLUDE_DIRS=("luci-app-leigod-acc" "leigod-acc" "luci-app-uugamebooster" "uugamebooster" "shadowsocks-libev" "fullconenat-nft" "luci-app-dockerman" "dockerd" "luci-app-pptp-server" "luci-app-pppoe-relay" "luci-app-pppoe-server" "luci-app-openvpn-server" "luci-app-openvpn-client" "luci-app-ipsec-server" "luci-app-ipsec-vpnd" "luci-app-zerotier" "luci-app-einat" "openwrt-einat-ebpf")
          DEST_DIR="repos/kwrt-packages"

          # Use the helper function to clone the repository
          define_clone_function "$REPO_URL" "$BRANCH" "$DEST_DIR"

          # Debug: Check if the cloned directory exists and is not empty
          if [ ! -d "$DEST_DIR" ] || [ -z "$(ls -A $DEST_DIR)" ]; then
            echo "Error: Cloned directory $DEST_DIR is missing or empty!"
            exit 1
          else
            echo "Cloned directory $DEST_DIR contains:"
            ls -la "$DEST_DIR"
          fi

          # Sync specified directories
          for dir in "${INCLUDE_DIRS[@]}"; do
            if [ -d "$DEST_DIR/$dir" ]; then
              echo "Syncing directory: $dir to ./"
              rsync -av --delete-after "$DEST_DIR/$dir/" "./$dir/"
            else
              echo "Directory $dir does not exist in kwrt-packages."
            fi
          done

          # Debug: Check if files were copied correctly
          echo "Files after syncing from $DEST_DIR:"
          ls -la

          # Cleanup
          rm -rf "$DEST_DIR"

      # Step 2: Configure Git Credentials with PAT
      - name: Configure Git Credentials
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ env.TARGET_REPO }}.git"

      # Step 3: Commit and Push Changes to the Target Repository using the Personal Access Token
      - name: Commit and Push Changes
        run: |
          # Ensure we are on the correct branch
          git checkout ${{ env.TARGET_BRANCH }} || (git checkout --orphan ${{ env.TARGET_BRANCH }} && git commit --allow-empty -m "Initial commit on new branch")

          # 添加所有更改
          git add .

          # 提交更改
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Sync from multiple repos"

            # 尝试拉取最新的更改并重新基础
            git pull --rebase origin ${{ env.TARGET_BRANCH }} || true

            # 自动解决冲突：保留远程版本
            resolve_conflicts() {
              local files_to_resolve=("README.md" "LICENSE")
              for file in "${files_to_resolve[@]}"; do
                if git ls-files --unmerged | grep -q "$file"; then
                  echo "Conflict detected in $file, attempting to resolve..."
                  git checkout --theirs "$file"
                  git add "$file"
                  echo "Resolved conflict in $file."
                fi
              done
            }

            # 检查是否有未解决的冲突
            if git ls-files --unmerged | grep -q .; then
              echo "Conflicts detected, attempting to resolve..."
              resolve_conflicts
              export GIT_EDITOR=: && \
              git rebase --continue || true
            else
              echo "No conflicts detected."
            fi

            # 推送更改
            git push origin ${{ env.TARGET_BRANCH }}
          fi
