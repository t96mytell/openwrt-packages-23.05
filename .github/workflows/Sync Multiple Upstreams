name: Sync Multiple Directories

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 2 * * *' # 每天凌晨2点自动执行

jobs:
  sync-multi-dirs:
    runs-on: ubuntu-latest
    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # GitHub Token
      TARGET_REPO: yourname/your-repo # 目标仓库
      TARGET_BRANCH: main # 目标分支

    steps:
      # Step 1: 检出目标仓库
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      # Step 2: 定义上游仓库及需同步的目录列表
      - name: Sync Directories from Upstream
        run: |
          # 定义上游仓库及需同步的目录（可扩展多个仓库）
          UPSTREAM_REPOS=(
            "repo1:Siriling/5G-Modem-Support@main:fibocom-dial fibocom_MHI fibocom_QMI_WWAN luci-app-cpe /
				   luci-app-gobinetmodem luci-app-hypermodem luci-app-modem luci-app-pcimodem luci-app-sms-tool /
				   luci-app-spdmodem luci-app-usbmodem meig-cm meig_QMI_WWAN quectel_Gobinet quectel_MHI /
				   quectel_QMI_WWAN quectel_SRPD_PCIE quectel_cm_5G sendat sms-tool"
            "repo2:kiddin9/kwrt-packages@main:luci-app-easymesh luci-app-leigod-acc leigod-acc /
				   luci-app-uugamebooster uugamebooster shadowsocks-libev fullconenat-nft luci-app-dockerman /
				   dockerd luci-app-pptp-server luci-app-pppoe-relay luci-app-pppoe-server /
				   luci-app-openvpn-server luci-app-openvpn-client luci-app-ipsec-server luci-app-ipsec-vpnd /
				   luci-app-zerotier luci-app-einat openwrt-einat-ebpf dns2socks-rust"
			"repo3:immortalwrt/packages@main:packages/lang/lua-neturl"
          )

          for repo_entry in "${UPSTREAM_REPOS[@]}"; do
            # 解析配置项
            IFS=':' read -r repo_id repo_path branch dirs <<< "$repo_entry"
            echo "Processing repo: $repo_id ($repo_path@$branch)"

            # 创建临时目录
            TMP_DIR="upstream_${repo_id}"
            mkdir -p "$TMP_DIR"

            # Step 2.1: 使用 sparse-checkout 克隆指定目录
            (
              cd "$TMP_DIR"
              git init
              git config core.sparseCheckout true

              # 添加需同步的目录到 sparse-checkout
              for dir in $dirs; do
                echo "$dir" >> .git/info/sparse-checkout
              done

			  # 添加排除规则（例如排除 utils/curl/tests）
              echo "!/README.md" >> .git/info/sparse-checkout
			  echo "!/LICENSE" >> .git/info/sparse-checkout


              # 拉取代码
              git remote add origin "https://$PERSONAL_ACCESS_TOKEN@github.com/$repo_path.git"
              git pull origin "$branch"

              # 验证目录存在
              for dir in $dirs; do
                if [ ! -d "$dir" ]; then
                  echo "Error: Directory $dir not found in $repo_path!"
                  exit 1
                fi
              done
            )

            # Step 2.2: 同步文件到目标仓库
            for dir in $dirs; do
              echo "Syncing $dir from $repo_id..."
              rsync -av --delete "$TMP_DIR/$dir/" "./$dir/" || exit 1
            done

            # 清理临时目录
            rm -rf "$TMP_DIR"
          done

      # Step 3: 提交并推送更改
      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Sync: Update multiple directories from upstream"
            git pull --rebase origin $TARGET_BRANCH

            # 自动解决冲突（保留目标仓库的更改）
            git diff --name-only --diff-filter=U | while read file; do
              echo "Resolving conflict in $file (keeping ours)..."
              git checkout --ours "$file"
              git add "$file"
            done

            git push origin $TARGET_BRANCH
          fi
